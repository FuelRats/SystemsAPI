"""init

Revision ID: 6f574aa16d7d
Revises: 
Create Date: 2020-02-11 19:01:06.562290

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy import Text

# revision identifiers, used by Alembic.
revision = 'unindexed'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('landmarks',
        sa.Column('name', sa.Text(), nullable=False),
        sa.Column('x', sa.Float(), nullable=True),
        sa.Column('y', sa.Float(), nullable=True),
        sa.Column('z', sa.Float(), nullable=True),
        sa.PrimaryKeyConstraint('name', name=op.f('pk_landmarks'))
    )
    op.create_table('models',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.Text(), nullable=True),
        sa.Column('value', sa.Integer(), nullable=True),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_models'))
    )
    op.create_index('my_index', 'models', ['name'], unique=True, mysql_length=255)
    op.create_table('permit_systems',
        sa.Column('id64', sa.BigInteger(), nullable=False),
        sa.PrimaryKeyConstraint('id64', name=op.f('pk_permit_systems'))
    )
    op.create_table('populated_systems',
        sa.Column('id64', sa.BigInteger(), nullable=False),
        sa.Column('name', sa.Text(), nullable=True),
        sa.Column('coords', postgresql.JSONB(astext_type=Text()), nullable=True),
        sa.Column('controllingFaction', postgresql.JSONB(astext_type=Text()), nullable=True),
        sa.Column('date', sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint('id64', name=op.f('pk_populated_systems'))
    )
    op.create_table('systems',
        sa.Column('id64', sa.BigInteger(), nullable=False),
        sa.Column('name', sa.Text(), nullable=True),
        sa.Column('coords', postgresql.JSONB(astext_type=Text()), nullable=True),
        sa.Column('date', sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint('id64', name=op.f('pk_systems'))
    )
    op.create_table('bodies',
        sa.Column('id64', sa.BigInteger(), nullable=False),
        sa.Column('bodyId', sa.Integer(), nullable=True),
        sa.Column('name', sa.Text(), nullable=True),
        sa.Column('type', sa.Text(), nullable=True),
        sa.Column('subType', sa.Text(), nullable=True),
        sa.Column('parents', postgresql.JSONB(astext_type=Text()), nullable=True),
        sa.Column('distanceToArrival', sa.Float(), nullable=True),
        sa.Column('isLandable', sa.Boolean(), nullable=True),
        sa.Column('gravity', sa.Float(), nullable=True),
        sa.Column('earthMasses', sa.Float(), nullable=True),
        sa.Column('radius', sa.Float(), nullable=True),
        sa.Column('surfaceTemperature', sa.Float(), nullable=True),
        sa.Column('surfacePressure', sa.Float(), nullable=True),
        sa.Column('volcanismType', sa.Text(), nullable=True),
        sa.Column('atmosphereType', sa.Text(), nullable=True),
        sa.Column('atmosphereComposition', postgresql.JSONB(astext_type=Text()), nullable=True),
        sa.Column('terraformingState', sa.Text(), nullable=True),
        sa.Column('orbitalPeriod', sa.Float(), nullable=True),
        sa.Column('semiMajorAxis', sa.Float(), nullable=True),
        sa.Column('orbitalEccentricity', sa.Float(), nullable=True),
        sa.Column('orbitalInclination', sa.Float(), nullable=True),
        sa.Column('argOfPeriapsis', sa.Float(), nullable=True),
        sa.Column('rotationalPeriod', sa.Float(), nullable=True),
        sa.Column('rotationalPeriodTidallyLocked', sa.Boolean(), nullable=True),
        sa.Column('axialTilt', sa.Float(), nullable=True),
        sa.Column('rings', postgresql.JSONB(astext_type=Text()), nullable=True),
        sa.Column('materials', postgresql.JSONB(astext_type=Text()), nullable=True),
        sa.Column('updateTime', sa.DateTime(), nullable=True),
        sa.Column('systemId64', sa.BigInteger(), nullable=True),
        sa.Column('systemName', sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(['systemId64'], ['systems.id64'], name=op.f('fk_bodies_systemId64_systems')),
        sa.PrimaryKeyConstraint('id64', name=op.f('pk_bodies'))
    )
    op.create_table('stars',
        sa.Column('id64', sa.BigInteger(), nullable=False),
        sa.Column('bodyId', sa.Integer(), nullable=True),
        sa.Column('name', sa.Text(), nullable=True),
        sa.Column('type', sa.Text(), nullable=True),
        sa.Column('subType', sa.Text(), nullable=True),
        sa.Column('parents', postgresql.JSONB(astext_type=Text()), nullable=True),
        sa.Column('distanceToArrival', sa.Float(), nullable=True),
        sa.Column('isMainStar', sa.Boolean(), nullable=True),
        sa.Column('isScoopable', sa.Boolean(), nullable=True),
        sa.Column('age', sa.BigInteger(), nullable=True),
        sa.Column('luminosity', sa.Text(), nullable=True),
        sa.Column('absoluteMagnitude', sa.Float(), nullable=True),
        sa.Column('solarMasses', sa.Float(), nullable=True),
        sa.Column('solarRadius', sa.Float(), nullable=True),
        sa.Column('surfaceTemperature', sa.Float(), nullable=True),
        sa.Column('orbitalPeriod', sa.Float(), nullable=True),
        sa.Column('semiMajorAxis', sa.Float(), nullable=True),
        sa.Column('orbitalEccentricity', sa.Float(), nullable=True),
        sa.Column('orbitalInclination', sa.Float(), nullable=True),
        sa.Column('argOfPeriapsis', sa.Float(), nullable=True),
        sa.Column('rotationalPeriod', sa.Float(), nullable=True),
        sa.Column('rotationalPeriodTidallyLocked', sa.Boolean(), nullable=True),
        sa.Column('axialTilt', sa.Float(), nullable=True),
        sa.Column('belts', postgresql.JSONB(astext_type=Text()), nullable=True),
        sa.Column('updateTime', sa.DateTime(), nullable=True),
        sa.Column('systemId64', sa.BigInteger(), nullable=True),
        sa.Column('systemName', sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(['systemId64'], ['systems.id64'], name=op.f('fk_stars_systemId64_systems')),
        sa.PrimaryKeyConstraint('id64', name=op.f('pk_stars'))
    )
    op.create_table('stations',
        sa.Column('id64', sa.BigInteger(), nullable=False),
        sa.Column('marketId', sa.BigInteger(), nullable=True),
        sa.Column('type', sa.Text(), nullable=True),
        sa.Column('name', sa.Text(), nullable=True),
        sa.Column('distanceToArrival', sa.Float(), nullable=True),
        sa.Column('allegiance', sa.Text(), nullable=True),
        sa.Column('government', sa.Text(), nullable=True),
        sa.Column('economy', sa.Text(), nullable=True),
        sa.Column('haveMarket', sa.Boolean(), nullable=True),
        sa.Column('haveShipyard', sa.Boolean(), nullable=True),
        sa.Column('haveOutfitting', sa.Boolean(), nullable=True),
        sa.Column('otherServices', postgresql.JSONB(astext_type=Text()), nullable=True),
        sa.Column('updateTime', sa.DateTime(), nullable=True),
        sa.Column('systemId64', sa.BigInteger(), nullable=True),
        sa.Column('systemName', sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(['systemId64'], ['systems.id64'], name=op.f('fk_stations_systemId64_systems')),
        sa.PrimaryKeyConstraint('id64', name=op.f('pk_stations'))
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('stations')
    op.drop_table('stars')
    op.drop_table('bodies')
    op.drop_table('systems')
    op.drop_table('populated_systems')
    op.drop_table('permit_systems')
    op.drop_index('my_index', table_name='models')
    op.drop_table('models')
    op.drop_table('landmarks')
    # ### end Alembic commands ###
